<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AspNetCore.Utilities</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Extensions.DependencyInjection.StartupExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.StartupExtensions.UseIcgAspNetCoreUtilities(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers the items included in the ICG AspNetCore Utilities project for Dependency Injection
            </summary>
            <param name="services">Your existing services collection</param>
        </member>
        <member name="T:ICG.AspNetCore.Utilities.IdentityExtensions">
            <summary>
            Extension methods for working with <see cref="T:System.Security.Principal.IIdentity"/> objects
            </summary>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.IdentityExtensions.GetClaimValue(System.Security.Principal.IIdentity,System.String)">
            <summary>
                This extension is used to extract the value of a specific type of claim, based on type.  If not found
                <see cref="F:System.String.Empty" /> is returned
            </summary>
            <param name="userIdentity">The user identity, should be of type <see cref="T:System.Security.Claims.ClaimsIdentity" /></param>
            <param name="claimType">The type of claim to extract</param>
            <returns>The value of the specified claim type for the user, or <see cref="F:System.String.Empty" /> if the claim wasn't found</returns>
            <example>
                @User.Identity.GetClaimValue("Profile:FirstName")
            </example>
        </member>
        <member name="T:ICG.AspNetCore.Utilities.IPathProvider">
            <summary>
                Wrapper for the <see cref="T:System.IO.Path" /> object for unit-testing
            </summary>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.IPathProvider.ChangeExtension(System.String,System.String)">
            <summary>
                Changes the extension of a path string.
            </summary>
            <param name="path">
                The path information to modify. The path cannot contain any of the characters defined in
                GetInvalidPathChars().
            </param>
            <param name="extension">
                The new extension (with or without a leading period). Specify null to remove an existing
                extension from path.
            </param>
            <returns>
                The modified path information.
                On Windows-based desktop platforms, if path is null or an empty string (""), the path information is returned
                unmodified.If extension is null, the returned string contains the specified path with its extension removed.If path
                has no extension, and extension is not null, the returned path string contains extension appended to the end of
                path.
            </returns>
            <exception cref="T:System.ArgumentException">path contains one or more of the invalid characters defined in GetInvalidPathChars().</exception>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.IPathProvider.Combine(System.String[])">
            <summary>
            Combines an array of strings into a path.
            </summary>
            <param name="paths">An array of parts of the path.</param>
            <returns>The combined paths.</returns>
            <exception cref="T:System.ArgumentException">One of the strings in the array contains one or more of the invalid characters defined in GetInvalidPathChars().</exception>
            <exception cref="T:System.ArgumentNullException">One of the strings in the array is null.</exception>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.IPathProvider.Combine(System.String,System.String)">
            <summary>
            Combines two strings into a path.
            </summary>
            <param name="path1">The first path to combine</param>
            <param name="path2">The second path to combine</param>
            <returns>The combined paths. If one of the specified paths is a zero-length string, this method returns the other path. If path2 contains an absolute path, this method returns path2.</returns>
            <exception cref="T:System.ArgumentException">path1 or path2 contains one or more of the invalid characters defined in GetInvalidPathChars().</exception>
            <exception cref="T:System.ArgumentNullException">path1 or path2 is null.</exception>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.IPathProvider.Combine(System.String,System.String,System.String)">
            <summary>
            Combines three strings into a path.
            </summary>
            <param name="path1">The first path to combine</param>
            <param name="path2">The second path to combine</param>
            <param name="path3">The third path to combine</param>
            <returns>The combined paths. If one of the specified paths is a zero-length string, this method returns the other path. If path2 contains an absolute path, this method returns path2.</returns>
            <exception cref="T:System.ArgumentException">path1 or path2 contains one or more of the invalid characters defined in GetInvalidPathChars().</exception>
            <exception cref="T:System.ArgumentNullException">path1 or path2 is null.</exception>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.IPathProvider.Combine(System.String,System.String,System.String,System.String)">
            <summary>
            Combined four strings into a path
            </summary>
            <param name="path1">The first path to combine</param>
            <param name="path2">The second path to combine</param>
            <param name="path3">The third path to combine</param>
            <param name="path4">The fourth path to combine</param>
            <returns>The combined path</returns>
            <exception cref="T:System.ArgumentException">If any inputs contain illegal path characters</exception>
            <exception cref="T:System.ArgumentNullException">If any inputs are null</exception>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.IPathProvider.GetDirectoryName(System.String)">
            <summary>
            Returns the directory information for the specified path string.
            </summary>
            <param name="path">The path of a file or directory.</param>
            <returns>Directory information for path, or null if path denotes a root directory or is null. Returns Empty if path does not contain directory information.</returns>
            <exception cref="T:System.ArgumentException">The path parameter contains invalid characters, is empty, or contains only white spaces.</exception>
            <exception cref="T:System.IO.PathTooLongException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, IOException, instead. The path parameter is longer than the system-defined maximum length.</exception>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.IPathProvider.GetExtension(System.String)">
            <summary>
            Gets the extension of the specified path string.
            </summary>
            <param name="path">The path string from which to get the extension.</param>
            <returns>The extension of the specified path (including the period "."), or null, or Empty. If path is null, GetExtension(String) returns null. If path does not have extension information, GetExtension(String) returns Empty.</returns>
            <exception cref="T:System.ArgumentException">path contains one or more of the invalid characters defined in GetInvalidPathChars().</exception>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.IPathProvider.GetFileName(System.String)">
            <summary>
            Returns the file name and extension of the specified path string.
            </summary>
            <param name="path">The path string from which to obtain the file name and extension.</param>
            <returns>The characters after the last directory character in path. If the last character of path is a directory or volume separator character, this method returns Empty. If path is null, this method returns null.</returns>
            <exception cref="T:System.ArgumentException">path contains one or more of the invalid characters defined in GetInvalidPathChars().</exception>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.IPathProvider.GetFileNameWithoutExtension(System.String)">
            <summary>
            Returns the file name of the specified path string without the extension.
            </summary>
            <param name="path">The path of the file.</param>
            <returns>The string returned by GetFileName(String), minus the last period (.) and all characters following it.</returns>
            <exception cref="T:System.ArgumentException">path contains one or more of the invalid characters defined in GetInvalidPathChars().</exception>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.IPathProvider.GetFullPath(System.String)">
            <summary>
            Returns the absolute path for the specified path string.
            </summary>
            <param name="path">The file or directory for which to obtain absolute path information.</param>
            <returns>The fully qualified location of path, such as "C:\MyFile.txt".</returns>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.IPathProvider.GetInvalidFileNameChars">
            <summary>
            Gets an array containing the characters that are not allowed in file names.
            </summary>
            <returns>An array containing the characters that are not allowed in file names.</returns>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.IPathProvider.GetInvalidPathChars">
            <summary>
            Gets an array containing the characters that are not allowed in path names.
            </summary>
            <returns>An array containing the characters that are not allowed in path names.</returns>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.IPathProvider.GetPathRoot(System.String)">
            <summary>
            Gets the root directory information of the specified path.
            </summary>
            <param name="path">The path from which to obtain root directory information.</param>
            <returns>The root directory of path, or null if path is null, or an empty string if path does not contain root directory information.</returns>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.IPathProvider.GetRandomFileName">
            <summary>
            Returns a random folder name or file name.
            </summary>
            <returns>A random folder name or file name.</returns>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.IPathProvider.GetTempFileName">
            <summary>
            Creates a uniquely named, zero-byte temporary file on disk and returns the full path of that file.
            </summary>
            <returns>The full path of the temporary file.</returns>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.IPathProvider.GetTempPath">
            <summary>
            Returns the path of the current user's temporary folder.
            </summary>
            <returns>The path to the temporary folder, ending with a backslash.</returns>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.IPathProvider.HasExtension(System.String)">
            <summary>
            Determines whether a path includes a file name extension.
            </summary>
            <param name="path">The path to search for an extension</param>
            <returns></returns>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.IPathProvider.IsPathFullyQualified(System.String)">
            <summary>
            Determines if the path is a fully qualified path
            </summary>
            <param name="path">The path to test</param>
            <returns></returns>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.IPathProvider.IsPathRooted(System.String)">
            <summary>
            Gets a value indicating whether the specified path string contains a root.
            </summary>
            <param name="path">The path to test.</param>
            <returns>true if path contains a root; otherwise, false.</returns>
        </member>
        <member name="T:ICG.AspNetCore.Utilities.PathProvider">
            <summary>
                Wrapper for the <see cref="T:System.IO.Path" /> object for unit-testing
            </summary>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.PathProvider.ChangeExtension(System.String,System.String)">
            <summary>
                Changes the extension of a path string.
            </summary>
            <param name="path">
                The path information to modify. The path cannot contain any of the characters defined in
                GetInvalidPathChars().
            </param>
            <param name="extension">
                The new extension (with or without a leading period). Specify null to remove an existing
                extension from path.
            </param>
            <returns>
                The modified path information.
                On Windows-based desktop platforms, if path is null or an empty string (""), the path information is returned
                unmodified.If extension is null, the returned string contains the specified path with its extension removed.If path
                has no extension, and extension is not null, the returned path string contains extension appended to the end of
                path.
            </returns>
            <exception cref="T:System.ArgumentException">path contains one or more of the invalid characters defined in GetInvalidPathChars().</exception>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.PathProvider.Combine(System.String[])">
            <summary>
            Combines an array of strings into a path.
            </summary>
            <param name="paths">An array of parts of the path.</param>
            <returns>The combined paths.</returns>
            <exception cref="T:System.ArgumentException">One of the strings in the array contains one or more of the invalid characters defined in GetInvalidPathChars().</exception>
            <exception cref="T:System.ArgumentNullException">One of the strings in the array is null.</exception>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.PathProvider.Combine(System.String,System.String)">
            <summary>
            Combines two strings into a path.
            </summary>
            <param name="path1">The first path to combine</param>
            <param name="path2">The second path to combine</param>
            <returns>The combined paths. If one of the specified paths is a zero-length string, this method returns the other path. If path2 contains an absolute path, this method returns path2.</returns>
            <exception cref="T:System.ArgumentException">path1 or path2 contains one or more of the invalid characters defined in GetInvalidPathChars().</exception>
            <exception cref="T:System.ArgumentNullException">path1 or path2 is null.</exception>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.PathProvider.Combine(System.String,System.String,System.String)">
            <summary>
            Combines three strings into a path.
            </summary>
            <param name="path1">The first path to combine</param>
            <param name="path2">The second path to combine</param>
            <param name="path3">The third path to combine</param>
            <returns>The combined paths. If one of the specified paths is a zero-length string, this method returns the other path. If path2 contains an absolute path, this method returns path2.</returns>
            <exception cref="T:System.ArgumentException">path1 or path2 contains one or more of the invalid characters defined in GetInvalidPathChars().</exception>
            <exception cref="T:System.ArgumentNullException">path1 or path2 is null.</exception>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.PathProvider.Combine(System.String,System.String,System.String,System.String)">
            <summary>
            Combined four strings into a path
            </summary>
            <param name="path1">The first path to combine</param>
            <param name="path2">The second path to combine</param>
            <param name="path3">The third path to combine</param>
            <param name="path4">The fourth path to combine</param>
            <returns>The combined path</returns>
            <exception cref="T:System.ArgumentException">If any inputs contain illegal path characters</exception>
            <exception cref="T:System.ArgumentNullException">If any inputs are null</exception>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.PathProvider.GetDirectoryName(System.String)">
            <summary>
            Returns the directory information for the specified path string.
            </summary>
            <param name="path">The path of a file or directory.</param>
            <returns>Directory information for path, or null if path denotes a root directory or is null. Returns Empty if path does not contain directory information.</returns>
            <exception cref="T:System.ArgumentException">The path parameter contains invalid characters, is empty, or contains only white spaces.</exception>
            <exception cref="T:System.IO.PathTooLongException">In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, IOException, instead. The path parameter is longer than the system-defined maximum length.</exception>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.PathProvider.GetExtension(System.String)">
            <summary>
            Gets the extension of the specified path string.
            </summary>
            <param name="path">The path string from which to get the extension.</param>
            <returns>The extension of the specified path (including the period "."), or null, or Empty. If path is null, GetExtension(String) returns null. If path does not have extension information, GetExtension(String) returns Empty.</returns>
            <exception cref="T:System.ArgumentException">path contains one or more of the invalid characters defined in GetInvalidPathChars().</exception>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.PathProvider.GetFileName(System.String)">
            <summary>
            Returns the file name and extension of the specified path string.
            </summary>
            <param name="path">The path string from which to obtain the file name and extension.</param>
            <returns>The characters after the last directory character in path. If the last character of path is a directory or volume separator character, this method returns Empty. If path is null, this method returns null.</returns>
            <exception cref="T:System.ArgumentException">path contains one or more of the invalid characters defined in GetInvalidPathChars().</exception>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.PathProvider.GetFileNameWithoutExtension(System.String)">
            <summary>
            Returns the file name of the specified path string without the extension.
            </summary>
            <param name="path">The path of the file.</param>
            <returns>The string returned by GetFileName(String), minus the last period (.) and all characters following it.</returns>
            <exception cref="T:System.ArgumentException">path contains one or more of the invalid characters defined in GetInvalidPathChars().</exception>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.PathProvider.GetFullPath(System.String)">
            <summary>
            Returns the absolute path for the specified path string.
            </summary>
            <param name="path">The file or directory for which to obtain absolute path information.</param>
            <returns>The fully qualified location of path, such as "C:\MyFile.txt".</returns>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.PathProvider.GetInvalidFileNameChars">
            <summary>
            Gets an array containing the characters that are not allowed in file names.
            </summary>
            <returns>An array containing the characters that are not allowed in file names.</returns>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.PathProvider.GetInvalidPathChars">
            <summary>
            Gets an array containing the characters that are not allowed in path names.
            </summary>
            <returns>An array containing the characters that are not allowed in path names.</returns>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.PathProvider.GetPathRoot(System.String)">
            <summary>
            Gets the root directory information of the specified path.
            </summary>
            <param name="path">The path from which to obtain root directory information.</param>
            <returns>The root directory of path, or null if path is null, or an empty string if path does not contain root directory information.</returns>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.PathProvider.GetRandomFileName">
            <summary>
            Returns a random folder name or file name.
            </summary>
            <returns>A random folder name or file name.</returns>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.PathProvider.GetTempFileName">
            <summary>
            Creates a uniquely named, zero-byte temporary file on disk and returns the full path of that file.
            </summary>
            <returns>The full path of the temporary file.</returns>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.PathProvider.GetTempPath">
            <summary>
            Returns the path of the current user's temporary folder.
            </summary>
            <returns>The path to the temporary folder, ending with a backslash.</returns>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.PathProvider.HasExtension(System.String)">
            <summary>
            Determines whether a path includes a file name extension.
            </summary>
            <param name="path">The path to search for an extension</param>
            <returns></returns>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.PathProvider.IsPathFullyQualified(System.String)">
            <summary>
            Determines if the path is a fully qualified path
            </summary>
            <param name="path">The path to test</param>
            <returns></returns>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.PathProvider.IsPathRooted(System.String)">
            <summary>
            Gets a value indicating whether the specified path string contains a root.
            </summary>
            <param name="path">The path to test.</param>
            <returns>true if path contains a root; otherwise, false.</returns>
        </member>
        <member name="T:ICG.AspNetCore.Utilities.ITimeProvider">
            <summary>
                A wrapper shim for the <see cref="T:System.DateTime" /> object to allow unit-testing
            </summary>
        </member>
        <member name="P:ICG.AspNetCore.Utilities.ITimeProvider.Now">
            <summary>
                Gets a <see cref="T:System.DateTime" /> object that is set to the current date and time on this computer, expressed in local
                time
            </summary>
        </member>
        <member name="P:ICG.AspNetCore.Utilities.ITimeProvider.Today">
            <summary>
                Gets the current date
            </summary>
        </member>
        <member name="P:ICG.AspNetCore.Utilities.ITimeProvider.UtcNow">
            <summary>
                Gets a <see cref="T:System.DateTime" /> object that is set to the current date and time on this computer, expressed in
                Coordinated Universal Time (UTC)
            </summary>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.ITimeProvider.DaysInMonth(System.Int32,System.Int32)">
            <summary>
                Returns the number of days in the specified month and year
            </summary>
            <param name="month">The month number</param>
            <param name="year">The year</param>
            <returns>Total number of days in the month</returns>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.ITimeProvider.Parse(System.String)">
            <summary>
                Converts the string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent by using the
                conventions of the current thread culture.
            </summary>
            <param name="s">A string that contains a date and time to convert. </param>
            <returns>An object that is equivalent to the date and time contained in s.</returns>
            <exception cref="T:System.ArgumentNullException">[s] is null</exception>
            <exception cref="T:System.FormatException">[s] does not contain a valid string representation of a date and time.</exception>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.ITimeProvider.Parse(System.String,System.IFormatProvider)">
            <summary>
                Converts the string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent by using the
                conventions of the current thread culture.
            </summary>
            <param name="s">A string that contains a date and time to convert. </param>
            <param name="provider">An object that supplies culture-specific format information about s. </param>
            <returns>An object that is equivalent to the date and time contained in s.</returns>
            <exception cref="T:System.ArgumentNullException">[s] is null</exception>
            <exception cref="T:System.FormatException">[s] does not contain a valid string representation of a date and time.</exception>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.ITimeProvider.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
                Converts the string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent by using the
                conventions of the current thread culture.
            </summary>
            <param name="s">A string that contains a date and time to convert. </param>
            <param name="provider">An object that supplies culture-specific format information about s. </param>
            <param name="styles">
                A bitwise combination of the enumeration values that indicates the style elements that can be
                present in s for the parse operation to succeed, and that defines how to interpret the parsed date in relation to
                the current time zone or the current date. A typical value to specify is None.
            </param>
            <returns>An object that is equivalent to the date and time contained in s.</returns>
            <exception cref="T:System.ArgumentNullException">[s] is null</exception>
            <exception cref="T:System.FormatException">[s] does not contain a valid string representation of a date and time.</exception>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.ITimeProvider.TryParse(System.String,System.DateTime@)">
            <summary>
                Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent and
                returns a value that indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a date and time to convert.</param>
            <param name="result">
                When this method returns, contains the DateTime value equivalent to the date and time contained in
                s, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails
                if the s parameter is null, is an empty string (""), or does not contain a valid string representation of a date
                and time. This parameter is passed uninitialized.
            </param>
            <returns>[true] if the s parameter was converted successfully; otherwise, [false].</returns>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.ITimeProvider.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
            <summary>
                Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the
                specified culture-specific format information and formatting style, and returns a value that indicates whether the
                conversion succeeded.
            </summary>
            <param name="s">A string containing a date and time to convert.</param>
            <param name="format">An object that supplies culture-specific formatting information about [s].</param>
            <param name="styles">
                A bitwise combination of enumeration values that defines how to interpret the parsed date in
                relation to the current time zone or the current date. A typical value to specify is [None].
            </param>
            <param name="result">
                When this method returns, contains the DateTime value equivalent to the date and time contained in
                s, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails
                if the s parameter is null, is an empty string (""), or does not contain a valid string representation of a date
                and time. This parameter is passed uninitialized.
            </param>
            <returns>[true] if the s parameter was converted successfully; otherwise, [false].</returns>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.ITimeProvider.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
            <summary>
                Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the
                specified format, culture-specific format information, and style. The format of the string representation must
                match the specified format exactly. The method returns a value that indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a date and time to convert.</param>
            <param name="format">The required format of [s].</param>
            <param name="provider">An object that supplies culture-specific formatting information about [s].</param>
            <param name="style">A bitwise combination of one or more enumeration values that indicate the permitted format of s.</param>
            <param name="result"></param>
            <returns>
                When this method returns, contains the DateTime value equivalent to the date and time contained in
                s, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails
                if the s parameter is null, is an empty string (""), or does not contain a valid string representation of a date
                and time. This parameter is passed uninitialized.
            </returns>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.ITimeProvider.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
            <summary>
                Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the
                specified format, culture-specific format information, and style. The format of the string representation must
                match the specified format exactly. The method returns a value that indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a date and time to convert.</param>
            <param name="formats">An array of allowable formats of [s].</param>
            <param name="provider">An object that supplies culture-specific formatting information about [s].</param>
            <param name="style">A bitwise combination of one or more enumeration values that indicate the permitted format of s.</param>
            <param name="result"></param>
            <returns>
                When this method returns, contains the DateTime value equivalent to the date and time contained in
                s, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails
                if the s parameter is null, is an empty string (""), or does not contain a valid string representation of a date
                and time. This parameter is passed uninitialized.
            </returns>
        </member>
        <member name="T:ICG.AspNetCore.Utilities.TimeProvider">
            <summary>
                A wrapper shim for the <see cref="T:System.DateTime" /> object to allow unit-testing
            </summary>
        </member>
        <member name="P:ICG.AspNetCore.Utilities.TimeProvider.Now">
            <summary>
                Gets a <see cref="T:System.DateTime" /> object that is set to the current date and time on this computer, expressed in local
                time
            </summary>
        </member>
        <member name="P:ICG.AspNetCore.Utilities.TimeProvider.Today">
            <summary>
                Gets the current date
            </summary>
        </member>
        <member name="P:ICG.AspNetCore.Utilities.TimeProvider.UtcNow">
            <summary>
                Gets a <see cref="T:System.DateTime" /> object that is set to the current date and time on this computer, expressed in
                Coordinated Universal Time (UTC)
            </summary>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.TimeProvider.DaysInMonth(System.Int32,System.Int32)">
            <summary>
                Returns the number of days in the specified month and year
            </summary>
            <param name="month">The month number</param>
            <param name="year">The year</param>
            <returns>Total number of days in the month</returns>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.TimeProvider.Parse(System.String)">
            <summary>
                Converts the string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent by using the
                conventions of the current thread culture.
            </summary>
            <param name="s">A string that contains a date and time to convert. </param>
            <returns>An object that is equivalent to the date and time contained in s.</returns>
            <exception cref="T:System.ArgumentNullException">[s] is null</exception>
            <exception cref="T:System.FormatException">[s] does not contain a valid string representation of a date and time.</exception>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.TimeProvider.Parse(System.String,System.IFormatProvider)">
            <summary>
                Converts the string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent by using the
                conventions of the current thread culture.
            </summary>
            <param name="s">A string that contains a date and time to convert. </param>
            <param name="provider">An object that supplies culture-specific format information about s. </param>
            <returns>An object that is equivalent to the date and time contained in s.</returns>
            <exception cref="T:System.ArgumentNullException">[s] is null</exception>
            <exception cref="T:System.FormatException">[s] does not contain a valid string representation of a date and time.</exception>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.TimeProvider.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
                Converts the string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent by using the
                conventions of the current thread culture.
            </summary>
            <param name="s">A string that contains a date and time to convert. </param>
            <param name="provider">An object that supplies culture-specific format information about s. </param>
            <param name="styles">
                A bitwise combination of the enumeration values that indicates the style elements that can be
                present in s for the parse operation to succeed, and that defines how to interpret the parsed date in relation to
                the current time zone or the current date. A typical value to specify is None.
            </param>
            <returns>An object that is equivalent to the date and time contained in s.</returns>
            <exception cref="T:System.ArgumentNullException">[s] is null</exception>
            <exception cref="T:System.FormatException">[s] does not contain a valid string representation of a date and time.</exception>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.TimeProvider.TryParse(System.String,System.DateTime@)">
            <summary>
                Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent and
                returns a value that indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a date and time to convert.</param>
            <param name="result">
                When this method returns, contains the DateTime value equivalent to the date and time contained in
                s, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails
                if the s parameter is null, is an empty string (""), or does not contain a valid string representation of a date
                and time. This parameter is passed uninitialized.
            </param>
            <returns>[true] if the s parameter was converted successfully; otherwise, [false].</returns>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.TimeProvider.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
            <summary>
                Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the
                specified culture-specific format information and formatting style, and returns a value that indicates whether the
                conversion succeeded.
            </summary>
            <param name="s">A string containing a date and time to convert.</param>
            <param name="format">An object that supplies culture-specific formatting information about [s].</param>
            <param name="styles">
                A bitwise combination of enumeration values that defines how to interpret the parsed date in
                relation to the current time zone or the current date. A typical value to specify is [None].
            </param>
            <param name="result">
                When this method returns, contains the DateTime value equivalent to the date and time contained in
                s, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails
                if the s parameter is null, is an empty string (""), or does not contain a valid string representation of a date
                and time. This parameter is passed uninitialized.
            </param>
            <returns>[true] if the s parameter was converted successfully; otherwise, [false].</returns>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.TimeProvider.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
            <summary>
                Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the
                specified format, culture-specific format information, and style. The format of the string representation must
                match the specified format exactly. The method returns a value that indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a date and time to convert.</param>
            <param name="format">The required format of [s].</param>
            <param name="provider">An object that supplies culture-specific formatting information about [s].</param>
            <param name="style">A bitwise combination of one or more enumeration values that indicate the permitted format of s.</param>
            <param name="result"></param>
            <returns>
                When this method returns, contains the DateTime value equivalent to the date and time contained in
                s, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails
                if the s parameter is null, is an empty string (""), or does not contain a valid string representation of a date
                and time. This parameter is passed uninitialized.
            </returns>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.TimeProvider.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
            <summary>
                Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the
                specified format, culture-specific format information, and style. The format of the string representation must
                match the specified format exactly. The method returns a value that indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a date and time to convert.</param>
            <param name="formats">An array of allowable formats of [s].</param>
            <param name="provider">An object that supplies culture-specific formatting information about [s].</param>
            <param name="style">A bitwise combination of one or more enumeration values that indicate the permitted format of s.</param>
            <param name="result"></param>
            <returns>
                When this method returns, contains the DateTime value equivalent to the date and time contained in
                s, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails
                if the s parameter is null, is an empty string (""), or does not contain a valid string representation of a date
                and time. This parameter is passed uninitialized.
            </returns>
        </member>
        <member name="T:ICG.AspNetCore.Utilities.ITimeSpanProvider">
            <summary>
                A wrapper shim for the <see cref="T:System.TimeSpan" /> object to allow unit-testing
            </summary>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.ITimeSpanProvider.FromMilliseconds(System.Double)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of milliseconds.
            </summary>
            <param name="value">A number of milliseconds.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.ITimeSpanProvider.FromSeconds(System.Double)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of seconds, where the specification is
                accurate to the nearest millisecond.
            </summary>
            <param name="value">A number of seconds.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.ITimeSpanProvider.FromMinutes(System.Double)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of minutes, where the specification is
                accurate to the nearest millisecond.
            </summary>
            <param name="value">A number of minutes.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.ITimeSpanProvider.FromHours(System.Double)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of hours, where the specification is accurate
                to the nearest millisecond.
            </summary>
            <param name="value">A number of hours.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.ITimeSpanProvider.FromDays(System.Double)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of days, where the specification is accurate
                to the nearest millisecond.
            </summary>
            <param name="value">A number of days.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.ITimeSpanProvider.FromTicks(System.Int64)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents a specified time, where the specification is in units of ticks.
            </summary>
            <param name="value">A number of Ticks.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.ITimeSpanProvider.Parse(System.String)">
            <summary>
                Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent.
            </summary>
            <param name="s">A string that specifies the time interval to convert</param>
            <returns>A time interval that corresponds to s.</returns>
            <exception cref="T:System.ArgumentNullException">[s] is null</exception>
            <exception cref="T:System.FormatException">[s] has an invalid format</exception>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.ITimeSpanProvider.Parse(System.String,System.IFormatProvider)">
            <summary>
                Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the
                specified culture-specific format information.
            </summary>
            <param name="input">A string that specifies the time interval to convert.</param>
            <param name="formatProvider">An object that supplies culture-specific formatting information</param>
            <returns>A time interval that corresponds to input, as specified by formatProvider.</returns>
            <exception cref="T:System.ArgumentNullException">[s] is null</exception>
            <exception cref="T:System.FormatException">[s] has an invalid format</exception>
            <exception cref="T:System.OverflowException">input represents a number that is less than MinValue or greater than MaxValue.</exception>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.ITimeSpanProvider.TryParse(System.String,System.TimeSpan@)">
            <summary>
                Converts the string representation of a time interval to its TimeSpan equivalent and returns a value that indicates
                whether the conversion succeeded.
            </summary>
            <param name="s">A string that specifies the time interval to convert.</param>
            <param name="result">
                When this method returns, contains an object that represents the time interval specified by s, or
                Zero if the conversion failed. This parameter is passed uninitialized.
            </param>
            <returns>
                true if s was converted successfully; otherwise, false. This operation returns false if the s parameter is
                null or Empty, has an invalid format, represents a time interval that is less than MinValue or greater than
                MaxValue, or has at least one days, hours, minutes, or seconds component outside its valid range.
            </returns>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.ITimeSpanProvider.TryParse(System.String,System.IFormatProvider,System.TimeSpan@)">
            <summary>
                Converts the string representation of a time interval to its TimeSpan equivalent and returns a value that indicates
                whether the conversion succeeded.
            </summary>
            <param name="s">A string that specifies the time interval to convert.</param>
            <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
            <param name="result">
                When this method returns, contains an object that represents the time interval specified by s, or
                Zero if the conversion failed. This parameter is passed uninitialized.
            </param>
            <returns>
                true if s was converted successfully; otherwise, false. This operation returns false if the s parameter is
                null or Empty, has an invalid format, represents a time interval that is less than MinValue or greater than
                MaxValue, or has at least one days, hours, minutes, or seconds component outside its valid range.
            </returns>
        </member>
        <member name="T:ICG.AspNetCore.Utilities.TimeSpanProvider">
            <summary>
                A wrapper shim for the <see cref="T:System.TimeSpan" /> object to allow unit-testing
            </summary>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.TimeSpanProvider.FromMilliseconds(System.Double)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of milliseconds.
            </summary>
            <param name="value">A number of milliseconds.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.TimeSpanProvider.FromSeconds(System.Double)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of seconds, where the specification is
                accurate to the nearest millisecond.
            </summary>
            <param name="value">A number of seconds.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.TimeSpanProvider.FromMinutes(System.Double)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of minutes, where the specification is
                accurate to the nearest millisecond.
            </summary>
            <param name="value">A number of minutes.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.TimeSpanProvider.FromHours(System.Double)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of hours, where the specification is accurate
                to the nearest millisecond.
            </summary>
            <param name="value">A number of hours.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.TimeSpanProvider.FromDays(System.Double)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of days, where the specification is accurate
                to the nearest millisecond.
            </summary>
            <param name="value">A number of days.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.TimeSpanProvider.FromTicks(System.Int64)">
            <summary>
                Returns a <see cref="T:System.TimeSpan" /> that represents a specified time, where the specification is in units of ticks.
            </summary>
            <param name="value">A number of Ticks.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.TimeSpanProvider.Parse(System.String)">
            <summary>
                Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent.
            </summary>
            <param name="s">A string that specifies the time interval to convert</param>
            <returns>A time interval that corresponds to s.</returns>
            <exception cref="T:System.ArgumentNullException">[s] is null</exception>
            <exception cref="T:System.FormatException">[s] has an invalid format</exception>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.TimeSpanProvider.Parse(System.String,System.IFormatProvider)">
            <summary>
                Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the
                specified culture-specific format information.
            </summary>
            <param name="input">A string that specifies the time interval to convert.</param>
            <param name="formatProvider">An object that supplies culture-specific formatting information</param>
            <returns>A time interval that corresponds to input, as specified by formatProvider.</returns>
            <exception cref="T:System.ArgumentNullException">[s] is null</exception>
            <exception cref="T:System.FormatException">[s] has an invalid format</exception>
            <exception cref="T:System.OverflowException">input represents a number that is less than MinValue or greater than MaxValue.</exception>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.TimeSpanProvider.TryParse(System.String,System.TimeSpan@)">
            <summary>
                Converts the string representation of a time interval to its TimeSpan equivalent and returns a value that indicates
                whether the conversion succeeded.
            </summary>
            <param name="s">A string that specifies the time interval to convert.</param>
            <param name="result">
                When this method returns, contains an object that represents the time interval specified by s, or
                Zero if the conversion failed. This parameter is passed uninitialized.
            </param>
            <returns>
                true if s was converted successfully; otherwise, false. This operation returns false if the s parameter is
                null or Empty, has an invalid format, represents a time interval that is less than MinValue or greater than
                MaxValue, or has at least one days, hours, minutes, or seconds component outside its valid range.
            </returns>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.TimeSpanProvider.TryParse(System.String,System.IFormatProvider,System.TimeSpan@)">
            <summary>
                Converts the string representation of a time interval to its TimeSpan equivalent and returns a value that indicates
                whether the conversion succeeded.
            </summary>
            <param name="s">A string that specifies the time interval to convert.</param>
            <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
            <param name="result">
                When this method returns, contains an object that represents the time interval specified by s, or
                Zero if the conversion failed. This parameter is passed uninitialized.
            </param>
            <returns>
                true if s was converted successfully; otherwise, false. This operation returns false if the s parameter is
                null or Empty, has an invalid format, represents a time interval that is less than MinValue or greater than
                MaxValue, or has at least one days, hours, minutes, or seconds component outside its valid range.
            </returns>
        </member>
        <member name="T:ICG.AspNetCore.Utilities.IUrlSlugGenerator">
            <summary>
            A utility process to create URL slugs based on supplied content.
            </summary>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.IUrlSlugGenerator.GenerateSlug(System.String)">
            <summary>
            Generates a URL friendly slug from user supplied content. Keeping only a-z, A-Z, and 0-9, non-matching characters are replaced with dashes, multiple dashes are removed
            </summary>
            <param name="input">The string to generate a slug for</param>
            <returns>A url friendly slug</returns>
        </member>
        <member name="T:ICG.AspNetCore.Utilities.UrlSlugGenerator">
            <summary>
            A utility process to create URL slugs based on supplied content.
            </summary>
        </member>
        <member name="M:ICG.AspNetCore.Utilities.UrlSlugGenerator.GenerateSlug(System.String)">
            <summary>
            Generates a URL friendly slug from user supplied content. Keeping only a-z, A-Z, and 0-9, non-matching characters are replaced with dashes, multiple dashes are removed
            </summary>
            <param name="input">The string to generate a slug for</param>
            <returns>A url friendly slug</returns>
        </member>
    </members>
</doc>
